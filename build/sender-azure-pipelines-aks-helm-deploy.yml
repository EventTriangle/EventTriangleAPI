trigger:
  batch: true
  branches:
    include:
      - develop
      - main
  paths:
    include:
      - build
      - src/sender/EventTriangleAPI.Sender.Application
      - src/sender/EventTriangleAPI.Sender.BusinessLogic
      - src/sender/EventTriangleAPI.Sender.Domain
      - src/sender/EventTriangleAPI.Sender.Presentation
      - src/sender/EventTriangleAPI.Sender.IntegrationTests
      - src/sender/EventTriangleAPI.Sender.UnitTests
      - src/shared/EventTriangleAPI.Shared.Application
      - src/shared/EventTriangleAPI.Shared.DTO

pr: none

variables:
  - name: appName
    value: 'SenderAPI'
  - name: System.Debug
    value: 'false'
  - group: AKS_Settings
  - group: Prefix_Library

pool:
  vmImage: 'ubuntu-latest'

stages:
  - stage: 'Build_${{ variables.appName }}'
    displayName: 'Build_${{ variables.appName }}'
    jobs:
      - template: templates/docker-build-push-jobs.yml
        parameters:
          JobName: 'Build_${{ variables.appName }}'
          solution: '$(System.DefaultWorkingDirectory)/EventTriangleAPI.sln'
          buildConfiguration: 'Release'
          backendProjectPath: '$(System.DefaultWorkingDirectory)/src/sender/EventTriangleAPI.Sender.Presentation'
          unitTestsProjectPath: '$(System.DefaultWorkingDirectory)/src/sender/EventTriangleAPI.Sender.UnitTests/EventTriangleAPI.Sender.UnitTests.csproj'
          shouldRunIntegrationTests: 'true'
          shouldRunUnitTests: 'true'
          integrationTestsProjectPath: '$(System.DefaultWorkingDirectory)/src/sender/EventTriangleAPI.Sender.IntegrationTests/EventTriangleAPI.Sender.IntegrationTests.csproj'
          dockerRegistryUrl: 'docker.io/kaminome'
          imageRepository: 'sender-service'
          dockerfilePath: '$(System.DefaultWorkingDirectory)/src/sender/Dockerfile'
          dockerServiceConnection: 'Docker_Hub_Connection'
          acrRegistryUrl: 'azuredevopsacrd01.azurecr.io'
          acrServiceConnection: 'Azure_ACR_Connection'
          workingDirectoryForDocker: '$(System.DefaultWorkingDirectory)/src'

      - stage: 'AKS_Helm_Deploy_${{ variables.appName }}'
        displayName: 'AKS_Helm_Deploy_${{ variables.appName }}'
        dependsOn: 'Build_${{ variables.appName }}'
        condition: succeeded('Build_${{ variables.appName }}')
        jobs:
          - template: templates/helm-deploy-jobs.yml
            parameters:
              chartName: 'sender-service-chart'
              stageDisplayName: 'AKS_Helm_Deploy_${{ variables.appName }}'
              vmImage: 'ubuntu-latest'
              environment: 'aks'
              serviceConnection: 'Azure_Connection'
              azureResourceGroup: '$(library-aks-resource-group)'
              kubernetesCluster: '$(library-aks-cluster-name)'
              namespace: 'event-triangle'

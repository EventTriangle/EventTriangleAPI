parameters:
  - name: vmImage
    type: string

  - name: environment
    type: string

  - name: serviceConnection
    type: string

  - name: azureResourceGroup
    type: string

  - name: kubernetesCluster
    type: string

  - name: namespace
    type: string
    default: 'event-triangle'

  - name: workingDirectory
    displayName: 'Working directory for Kubernetes'
    type: string

  - name: dependsOn
    displayName: 'Depends On'
    type: object

  - name: condition
    displayName: 'Condition'
    type: string

stages:
  - stage: 'Configure_AKS_${{ parameters.environment }}'
    displayName: 'Configure_AKS_${{ parameters.environment }}'
    dependsOn: ${{ parameters.dependsOn }}
    condition: succeeded('${{ parameters.condition }}')
    jobs:
      - deployment: 'Configure_AKS_${{ parameters.environment }}'
        displayName: 'Configure_AKS_${{ parameters.environment }}'
        pool:
          vmImage: ${{ parameters.vmImage }}
        environment: ${{ parameters.environment }}
        strategy:
          runOnce:
            deploy:
              steps:
                - checkout: self
                  fetchDepth: 0
                  
                - task: Kubernetes@1
                  displayName: 'Kubernetes Login'
                  inputs:
                    connectionType: 'Azure Resource Manager'
                    azureSubscriptionEndpoint: ${{ parameters.serviceConnection }}
                    azureResourceGroup: ${{ parameters.azureResourceGroup }}
                    kubernetesCluster: ${{ parameters.kubernetesCluster }}
                    command: 'login'

                - task: replacetokens@5
                  displayName: 'Replace tokens in secrets'
                  inputs:
                    rootDirectory: '${{ parameters.workingDirectory }}'
                    targetFiles: |
                      secrets/connection-secrets.yaml
                      secrets/rabbit-mq-secrets.yaml
                    tokenPattern: 'doublebraces'
                    writeBOM: false

                - bash: |
                    kubectl apply -f ./namespace
                  workingDirectory: '${{ parameters.workingDirectory }}'
                  displayName: 'Create namespace'
                
                - bash: |
                    kubectl apply -f ./secrets --namespace ${{ parameters.namespace }}
                  workingDirectory: '${{ parameters.workingDirectory }}'
                  displayName: 'Deploy secrets'
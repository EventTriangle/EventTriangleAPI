parameters:
  - name: buildConfiguration
    displayName: 'Build Configuration'
    type: string

  - name: backendProjectPath
    displayName: 'Backend project path'
    type: string

  - name: integrationTestsProjectPath
    displayName: 'Integration Tests Project Path'
    default: ' '
    type: string

  - name: unitTestsProjectPath
    displayName: 'Unit Tests Project Path'
    default: ' '
    type: string
    
  - name: creatingDatabase
    displayName: 'Creating Database'
    default: false
    type: boolean

  - name: pushDockerImage
    displayName: 'Push Docker Image'
    default: false
    type: boolean

  - name: imageRepository
    displayName: "Image Repository"
    default: ' '
    type: string
    
  - name: dockerfilePath
    displayName: "Dockerfile Path"
    default: ' '
    type: string
    
  - name: dockerfileServiceConnection
    displayName: "Dockerfile Service Connection"
    default: ' '
    type: string

jobs:
  - job: 'Build_And_Test_Pack'
    displayName: 'Build & Drop Artifact'
    steps:
      - checkout: self
        fetchDepth: 0

      - task: gitversion/setup@0
        displayName: 'GitVersion Setup'
        inputs:
          versionSpec: '5.9.x'

      - task: gitversion/execute@0
        displayName: 'GitVersion Execute'
        inputs:
          updateAssemblyInfo: true

      - bash: echo $Action$BuildVersion
        displayName: 'Set Build Version'
        env:
          Action: '##vso[build.updatebuildnumber]'
          BuildVersion: $(GitVersion.SemVer)

      - task: UseDotNet@2
        displayName: 'Install .NET 6.x SDK'
        inputs:
          packageType: sdk
          version: 6.x

      - task: DotNetCoreCLI@2
        displayName: 'Dotnet restore'
        inputs:
          command: 'restore'
          projects: |
            ${{ parameters.backendProjectPath }}
            ${{ parameters.integrationTestsProjectPath }}
          arguments: '--verbosity minimal'

      - task: DotNetCoreCLI@2
        displayName: 'Dotnet build ${{ parameters.buildConfiguration }}'
        inputs:
          command: 'build'
          projects: |
            ${{ parameters.backendProjectPath }}
            ${{ parameters.integrationTestsProjectPath }}
          arguments: '-c ${{ parameters.buildConfiguration }} --no-restore'

      - ${{ if eq(parameters.creatingDatabase, true) }}:
        - task: PowerShell@2
          displayName: 'Start PostgreSQL database in docker container'
          inputs:
            targetType: 'inline'
            script: 'docker run --name pgsql-db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres:latest'

      - ${{ if eq(parameters.creatingDatabase, true) }}:
        - task: PowerShell@2
          displayName: 'Wait database'
          timeoutInMinutes: 5
          inputs: 
            targetType: 'inline'
            script: .\scripts\wait_postgres_database.ps1

      - task: DotnetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: 'test'
          projects: '${{ parameters.unitTestsProjectPath }}'

      - task: DotNetCoreCLI@2
        displayName: 'Run integration tests'
        inputs:
          command: 'test'
          projects: '${{ parameters.integrationTestsProjectPath }}'
          arguments: '--no-restore'

      - task: PublishTestResults@2
        inputs:
          testRunner: VSTest
          testResultsFiles: '$(Agent.TempDirectory)/**/*.trx'

      - task: DotNetCoreCLI@2
        displayName: 'Dotnet Publish'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '${{ parameters.backendProjectPath }}'
          arguments: '-c ${{ parameters.buildConfiguration }} -o $(Build.ArtifactStagingDirectory)/${{ parameters.buildConfiguration }} --no-build'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'
          
      - task: Docker@2
        displayName: Login to Docker Hub
        inputs:
          command: login
          containerRegistry: '${{ parameters.dockerfileServiceConnection }}'

      - bash: |
          IMAGE_FULL_NAME="$REPOSITORY:$VERSION"
          echo "Image full name: $IMAGE_FULL_NAME"
          cd ./src/authorization/EventTriangle.Client/src
          docker build --build-arg FRONT_API_URL="http://localhost:7000/" -t "$IMAGE_FULL_NAME" -f "$DOCKERFILE-PATH" .
        env:
          REPOSITORY: ${{ parameters.imageRepository }}
          DOCKERFILE-PATH: ${{ parameters.dockerfilePath }}
          VERSION: $(GitVersion.SemVer)
        displayName: 'Build Docker Image'

      - task: Docker@2
        displayName: 'Push to DockerHub'
        inputs:
          command: push
          containerRegistry: '${{ parameters.dockerfileServiceConnection }}'
          repository: '${{ parameters.imageRepository }}'
          tags: '$(GitVersion.SemVer)'
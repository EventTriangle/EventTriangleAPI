parameters:
  - name: solution
    type: string

  - name: buildConfiguration
    type: string

  - name: backendProjectPath
    type: string

  - name: unitTestsProjectPath
    type: string

  - name: shouldRunIntegrationTests
    type: boolean
    
  - name: integrationTestsProjectPath
    type: string

  - name: dockerUsername
    type: string

  - name: imageRepository
    type: string

  - name: dockerfilePath
    type: string

  - name: dockerfileServiceConnection
    type: string

jobs:
  - job: 'Build_And_Test_Pack'
    displayName: 'Build & Drop Artifact'
    steps:
      - checkout: self
        fetchDepth: 0

      - task: gitversion/setup@0
        displayName: 'GitVersion Setup'
        inputs:
          versionSpec: '5.9.x'

      - task: gitversion/execute@0
        displayName: 'GitVersion Execute'
        inputs:
          updateAssemblyInfo: true

      - bash: echo $Action$BuildVersion
        displayName: 'Set Build Version'
        env:
          Action: '##vso[build.updatebuildnumber]'
          BuildVersion: $(GitVersion.SemVer)

      - task: DotNetCoreCLI@2
        displayName: 'Dotnet restore'
        inputs:
          command: 'restore'
          projects: '${{ parameters.solution }}'
          arguments: '--verbosity minimal'

      - task: DotNetCoreCLI@2
        displayName: 'Build solution'
        inputs:
          command: 'build'
          projects: '${{ parameters.solution }}'
          arguments: '-c ${{ parameters.buildConfiguration }} -p:Version=$(GitVersion.SemVer) --no-restore'
          
      - task: DotnetCoreCLI@2
        displayName: 'Run unit tests'
        inputs:
          command: 'test'
          projects: '${{ parameters.unitTestsProjectPath }}'
          arguments: '--no-build --configuration ${{ parameters.buildConfiguration }} --collect "Code Coverage"'

      - ${{ if eq(parameters.shouldRunIntegrationTests, 'true') }}:
          - task: PowerShell@2
            displayName: 'Start PgSQL container'
            inputs:
              targetType: 'inline'
              script: 'docker run --name pgsql-db -e POSTGRES_USER=postgres -e POSTGRES_PASSWORD=postgres -p 5432:5432 -d postgres:latest'

      - ${{ if eq(parameters.shouldRunIntegrationTests, 'true') }}:
          - task: PowerShell@2
            displayName: 'Wait database'
            timeoutInMinutes: 5
            inputs:
              targetType: 'inline'
              script: .\scripts\wait_postgres_database.ps1

      - ${{ if eq(parameters.shouldRunIntegrationTests, 'true') }}:
          - task: DotNetCoreCLI@2
            displayName: 'Run integration tests'
            inputs:
              command: 'test'
              projects: '${{ parameters.integrationTestsProjectPath }}'
              arguments: '--no-build --configuration ${{ parameters.buildConfiguration }} --collect "Code Coverage"'

      - task: DotNetCoreCLI@2
        displayName: 'Dotnet Publish'
        inputs:
          command: 'publish'
          publishWebProjects: false
          projects: '${{ parameters.backendProjectPath }}'
          arguments: '-c ${{ parameters.buildConfiguration }} -o $(Build.ArtifactStagingDirectory)/${{ parameters.buildConfiguration }} --no-build'

      - task: PublishBuildArtifacts@1
        displayName: 'Publish Artifacts'
        inputs:
          PathtoPublish: '$(Build.ArtifactStagingDirectory)'
          ArtifactName: 'drop'
          publishLocation: 'Container'

      - task: Docker@2
        displayName: Login to Docker Hub
        inputs:
          command: login
          containerRegistry: '${{ parameters.dockerfileServiceConnection }}'

      - bash: |
          IMAGE_FULL_NAME="$DOCKERUSERNAME/$REPOSITORY:$VERSION"
          echo "Image full name: $IMAGE_FULL_NAME"
          docker build --build-arg FRONT_API_URL="http://localhost:7000/" --build-arg VERSION=$VERSION -t "$IMAGE_FULL_NAME" -f "$DOCKERFILEPATH" .
          docker build --build-arg FRONT_API_URL="http://localhost:7000/" --build-arg VERSION=$VERSION -t "$DOCKERUSERNAME/$REPOSITORY:latest" -f "$DOCKERFILEPATH" .
        env:
          REPOSITORY: ${{ parameters.imageRepository }}
          DOCKERFILEPATH: ${{ parameters.dockerfilePath }}
          VERSION: $(GitVersion.SemVer)
          DOCKERUSERNAME: ${{ parameters.dockerUsername }}
        workingDirectory: '$(Build.SourcesDirectory)/src'
        displayName: 'Build Docker Image'

      - task: Docker@2
        displayName: 'Push to DockerHub'
        inputs:
          command: push
          containerRegistry: '${{ parameters.dockerfileServiceConnection }}'
          repository: '${{ parameters.dockerUsername }}/${{ parameters.imageRepository }}'
          tags: |
            $(GitVersion.SemVer)
            latest
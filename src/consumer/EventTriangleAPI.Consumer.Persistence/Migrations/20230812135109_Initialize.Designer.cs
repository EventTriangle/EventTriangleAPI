// <auto-generated />
using System;
using EventTriangleAPI.Consumer.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace EventTriangleAPI.Consumer.Persistence.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230812135109_Initialize")]
    partial class Initialize
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.ContactEntity", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("ContactId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("ContactEntities");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.CreditCardEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CardNumber")
                        .HasColumnType("text");

                    b.Property<string>("Cvv")
                        .HasColumnType("text");

                    b.Property<string>("Expiration")
                        .HasColumnType("text");

                    b.Property<string>("HolderName")
                        .HasColumnType("text");

                    b.Property<int>("PaymentNetwork")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("CreditCardEntities");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.SupportTicketEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("TicketJustification")
                        .HasColumnType("text");

                    b.Property<string>("TicketReason")
                        .HasColumnType("text");

                    b.Property<int>("TicketStatus")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("WalletId");

                    b.ToTable("SupportTicketEntities");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.TransactionEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FromUserId")
                        .HasColumnType("text");

                    b.Property<string>("ToUserId")
                        .HasColumnType("text");

                    b.Property<int>("TransactionState")
                        .HasColumnType("integer");

                    b.Property<int>("TransactionType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToUserId");

                    b.ToTable("TransactionEntities");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<int>("UserRole")
                        .HasColumnType("integer");

                    b.Property<int>("UserStatus")
                        .HasColumnType("integer");

                    b.Property<Guid>("WalletId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("WalletId")
                        .IsUnique();

                    b.ToTable("UserEntities");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.WalletEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("Balance")
                        .HasColumnType("numeric");

                    b.Property<Guid?>("LastTransactionId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LastTransactionId");

                    b.ToTable("WalletEntities");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.ContactEntity", b =>
                {
                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", "Contact")
                        .WithMany()
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", "User")
                        .WithMany("Contacts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.CreditCardEntity", b =>
                {
                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.SupportTicketEntity", b =>
                {
                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.WalletEntity", "Wallet")
                        .WithMany()
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.TransactionEntity", b =>
                {
                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", "FromUser")
                        .WithMany()
                        .HasForeignKey("FromUserId");

                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", "ToUser")
                        .WithMany()
                        .HasForeignKey("ToUserId");

                    b.Navigation("FromUser");

                    b.Navigation("ToUser");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", b =>
                {
                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.WalletEntity", "Wallet")
                        .WithOne("User")
                        .HasForeignKey("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", "WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.WalletEntity", b =>
                {
                    b.HasOne("EventTriangleAPI.Consumer.Domain.Entities.TransactionEntity", "LastTransaction")
                        .WithMany()
                        .HasForeignKey("LastTransactionId");

                    b.Navigation("LastTransaction");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.UserEntity", b =>
                {
                    b.Navigation("Contacts");
                });

            modelBuilder.Entity("EventTriangleAPI.Consumer.Domain.Entities.WalletEntity", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
